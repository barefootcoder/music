#!/usr/bin/env perl

use myperl::Script;
use autodie qw< :all >;

use File::Copy;
use Path::Class;

use Music;


const our $DEST    => $MUSICHOME->subdir('k3b', 'for-burning');
const our $TRIMDIR => $MUSICHOME->subdir('alt', 'trimmed'    );

$| = 1;


opts <<'-';
	<m3u-playlist> [<num>]
	<m3u-playlist> : playlist file to read
	<num>          : for a multi-volume playlist, do only this volume
-


my $playlist = shift;
my $sequence = @ARGV ? shift : 1;
die("need an M3U playlist") unless -r $playlist and $playlist =~ /\.m3u$/;
die("second (optional) arg must be a positive int") unless $sequence =~ /^\d+$/ and $sequence > 0;

my $counter = 1;
my @tracks = grep { not /^#/ } grep { ++$counter if /^#\s*cut/; $counter == $sequence } slurp $playlist;
chomp @tracks;

my $tracknum = 0;
foreach (@tracks)
{
	die("can't open track: $_") unless -r;
	my $track = sprintf("%02d %s", ++$tracknum, file($_)->basename);
	$track =~ s/[?]//g;													# some chars K3B can't handle
	my $burnfile = $DEST->file($track);
	printf "track: %02d ... copying ... ", $tracknum;
	copy $_, $burnfile;
	print "trimming ... ";
	system('trim-silence', $burnfile);
	print "removing backup ... ";
	unlink $TRIMDIR->file($track);
	say "done";
}

say "Ready to burn.";
say "Go into K3B and add files from $DEST.";
say "Go into Project / Properties / Advanced and check Normalize volume levels.";
say "Select all files, right-click, Properties / Options, set Post-Gap to 0:00.";
say "Press <enter> when burn is complete.";
<STDIN>;

say "You must remove the burn files before you can burn a different disc.";
if (confirm "Remove them now?")
{
	$_->remove foreach $DEST->children;
}
