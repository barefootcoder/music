#! /usr/bin/env perl

use myperl;
use autodie ':all';

use MP3::Tag;
use MP3::Info;

use Music;


const our $VALUE_WIDTH => 40;


my ($lh_file, $rh_file) = map { -d $_ ? dir($_) : file($_) } @ARGV;
$rh_file = $rh_file->file($lh_file->basename) if -d $rh_file;
my $lhs = gather_info($lh_file);
my $rhs = gather_info($rh_file);
debuggit(3 => "lhs:", DUMP => $lhs, "rhs:", DUMP => $rhs);

print_diff(time => $lhs->{'time'}, $rhs->{'time'}) unless compare_song_times($lhs->{'time'}, $rhs->{'time'}) == 0;
foreach (qw< bitrate frequency >)
{
	print_diff($_ => $lhs->{$_}, $rhs->{$_}) unless $lhs->{$_} eq $rhs->{$_};
}

foreach (qw< rough-volume >)
{
	print_diff($_ => $lhs->{$_}, $rhs->{$_}) unless $lhs->{$_} == $rhs->{$_};
}

if (exists $lhs->{'tag1'} and exists $rhs->{'tag1'})
{
	foreach (sort keys %{$lhs->{'tag1'}})								# keys are guaranteed to be the same on both sides
	{
		print_diff("v1:$_" => $lhs->{'tag1'}->{$_}, $rhs->{'tag1'}->{$_})
				unless $lhs->{'tag1'}->{$_} eq $rhs->{'tag1'}->{$_};
	}
}
elsif (exists $lhs->{'tag1'})
{
	print_diff(tags => "has ID3v1 tag", "no tag");
}
elsif (exists $rhs->{'tag1'})
{
	print_diff(tags => "no tag", "has ID3v1 tag");
}

if (exists $lhs->{'tag2'} and exists $rhs->{'tag2'})
{
	foreach (uniq sort (keys %{$lhs->{'tag2'}}, %{$rhs->{'tag2'}}))
	{
		print_diff("v2:$_" => $lhs->{'tag2'}->{$_}, $rhs->{'tag2'}->{$_})
				unless ($lhs->{'tag2'}->{$_} // "no such frame") eq ($rhs->{'tag2'}->{$_} // "no such frame");
	}
}
elsif (exists $lhs->{'tag2'})
{
	print_diff(tags => "has ID3v2 tag", "no tag");
}
elsif (exists $rhs->{'tag2'})
{
	print_diff(tags => "no tag", "has ID3v2 tag");
}


func get_sox_stats ($mp3)
{
	my $stats = {};
	foreach (`sox "$mp3" -n stat 2>&1`)
	{
		/^ (.*?) : \h* (.*) \s*/x or die("unrecognized line from sox; $_");
		$stats->{ $1 =~ s/\h{2,}/ /gr } = $2;
	}
	return $stats;
}

func gather_info ($mp3)
{
	my $data = {};
	my $tag = get_tag("$mp3");
	my $info = $tag->_info;
	my $sox_stat = get_sox_stats("$mp3");

	$data->{'time'} = $info->{'TIME'} // '0:00';
	$data->{'bitrate'} = ($info->{'BITRATE'} // '???') . 'kbps';
	$data->{'frequency'} = ($info->{'FREQUENCY'} // '???') . 'kHz';

	$data->{'rough-volume'} = 10 - $sox_stat->{'Volume adjustment'} * 2;

	if ($tag->has_v1)
	{
		@{ $data->{'tag1'} }{qw< title artist album year comment track genre >} = $tag->v1_data;
	}

	if ($tag->has_v2)
	{
		foreach my $frame ( $tag->frames )
		{
			my ($key, $value) = $tag->get_frame_for_display($frame, $VALUE_WIDTH);
			$data->{'tag2'}->{$key} = $value;
		}
	}

	return $data;
}


func print_diff ($label, $lhs, $rhs)
{
	state $started = 0;
	state $format = "%33s   %-${VALUE_WIDTH}.${VALUE_WIDTH}s     %-${VALUE_WIDTH}.${VALUE_WIDTH}s\n";

	unless ($started)
	{
		my ($l, $r) = $lh_file->basename eq $rh_file->basename
				? ($lh_file->dir =~ s{^$MUSICHOME/}{}r, $rh_file->dir =~ s{^$MUSICHOME/}{}r)
				: ($lh_file->basename, $rh_file->basename);
		printf $format, '', $l, $r;
		printf $format, '', '-' x $VALUE_WIDTH, '-' x $VALUE_WIDTH;
		$started = 1;
	}
	$lhs //= '<<MISSING>>';
	$rhs //= '<<MISSING>>';
	printf $format, $label . ':', $lhs, $rhs;
}
