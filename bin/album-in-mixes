#! /usr/bin/env perl

use myperl::Pxb;
use autodie ':all';

use Text::Unidecode;

use Music;
use Music::Dirs;

const my $CONST => 'Some Constant';


opts <<'-';
	[-D] <tracklist>
	-D : debug mode (implies -v)
	<tracklist> : .m3u file of album to draw tracks from
	checks every song in <tracklist> to see what mixes it is a part of
	note: misspellings in track names WILL give false results
-

my $album = album_arg(shift) or usage_error("must supply album to check against");
my $adir = album(dir => $album);
usage_error("the tracklist must belong to an actual album, not a mix") unless is_album_dir($adir);
my $tag = get_tag($adir);


my %CODE =
(
	'.' => 'blogged',
	'>' => 'proposed',
	' ' => 'added',
);

my $search = determine_search($tag);
say "searching for $search" if $OPT{D};
my %discovered;
# this is just the simplest pattern `find_artist` will recognize
foreach ( sh(find_artist => "'\t$search - '", $MUSICHOME->child("mixes/mixes")) )
{
	next if /searching for:/ or /^$/ or /^\t/;
	/^ (.) (.*?) \h-\h .* \[ (.*) \] $/x or die("don't understand line from find_artist [$_]");
	$discovered{$2} = [$1 => $3];
	warn("going to have a problem soon ... [$1]") unless exists $CODE{$1};
}
say "  found ", scalar keys %discovered, " tracks" if $OPT{D};

foreach ( map { get_tag($_) } album(tracklist => $album)->slurp(chomp => 1) )
{
	 printf "%2d. %-30s :: %-50s  %s\n", $_->tracknum, $_->title,
	 		map { defined() ? (unidecode($_->[1]), "($CODE{$_->[0]})") : ('','') } $discovered{unidecode($_->title)};
}


sub determine_search
{
	my ($tag) = @_;
	if ($tag->genre eq 'Soundtrack')
	{
		my $search = $tag->album;
		$search =~ s/^(an|the) //i;
		$search =~ s/ (suite)$//i;
		return $search;
	}
	else
	{
		return $tag->artist;
	}
}
