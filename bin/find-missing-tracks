#! /usr/bin/env perl

use myperl::Script DEBUG => 1;
use Method::Signatures;
use autodie qw< :all >;
use Carp::Always;

use Getopt::Std;
use Path::Class;

use Music;
use Music::Dirs;


opts <<"-";
	[-f|-F]
	-f : fix (when a missing track is found, try to find where it moved to)
	-F : fix and shuffle the filenames (.m3u => .bak, .fix => .m3u)
-
$OPT{f} = 1 if $OPT{F};


my @files_to_check;
foreach my $arg (@ARGV)
{
	if (-f $arg)
	{
		push @files_to_check, $arg;
	}
	elsif (-d $arg)
	{
		push @files_to_check, glob("$arg/*");
	}
	else
	{
		die("can't access $arg");
	}
}
debuggit(3 => "files to check: @files_to_check");


foreach my $file (@files_to_check)
{
	# ignore .bak files
	next if $file =~ /\.bak$/;

	$file = file($file);
	my $tracklist = $file->basename;
	debuggit(2 => "  checking :", $tracklist);
	my $fixed = [];

	my $needs_fixfile = 0;
	open(IN, $file) or die("can't open file $file");
	while ( <IN> )
	{
		push @$fixed, $_ and next if /^#/;
		chomp;

		say STDERR "    checking : $_" if DEBUG >= 2;
		if ( -r $_ )
		{
			push @$fixed, "$_\n";
		}
		else
		{
			if ($OPT{f})
			{
				$needs_fixfile = 1;
				my $song = file($_)->basename;
				debuggit(4 => "trying to find", $song);
				my $repl = find_replacement($song);
				push @$fixed, map { "$_\n" } $repl // ('# FOLLOWING TRACK IS MISSING:', $_);
			}
			else
			{
				say "$tracklist :: MISSING: $_";
			}
		}

	}
	close(IN);

	if ($needs_fixfile)
	{
		my $fixfile = file($file =~ s/\.m3u$/.fix/r);
		$fixfile->spew($fixed);
		if ($OPT{F})
		{
			my $bakfile = $file =~ s/\.m3u$/.bak/r;
			rename $file, $bakfile;
			rename $fixfile, $file;
			say "fixed $file; created $bakfile";
		}
		else
		{
			say "created fixfile: $fixfile";
		}
	}
}


func concistencize ($string)
{
	# We're going to have format_sortkey() do most of the hard work for us.  But we do need to
	# extract any articles (A, An, or The) from the front of the string.  This isn't that hard, but
	# we have to look out for any exceptions to the rule:
	#	*	In "A House", the initial "A" isn't an article.  We'll have to explicitly exclude that
	#		one.
	#	*	For "The The", in a case where the first "The" has already been removed, we don't want
	#		to remove the second one.  For this one, the fact that we search for the article _and_
	#		the space after it should take care of it.
	state $EXCEPTIONS = { map { $_ => 1 } ('A House') };

	$string =~ s/^(The|A|An) // unless exists $EXCEPTIONS->{$string};
	return format_sortkey($string);
}

func make_key ($song)
{
	my ($artist, $title) = $song =~ /^(.*?)(?: - (.*))?\.mp3$/;
	return $title ? join('-', map { concistencize($_) } ($artist, $title)) : concistencize($artist);
}

func find_replacement ($song)
{
	state $ALL_SONGS =
	{
		map  { make_key($_->basename) => $_                     }
		grep { /\.mp3$/                                         }
		map  { $_->children                                     }
		     ( single_dirs(), map { $_->children } album_dirs() )
	};

	return $ALL_SONGS->{ make_key($song) };
}
